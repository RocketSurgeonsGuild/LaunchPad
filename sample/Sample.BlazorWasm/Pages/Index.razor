@page "/"
@using MediatR
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting
@using Microsoft.Extensions.Configuration
@using Microsoft.Extensions.Logging
@using Rocket.Surgery.Conventions
@using Rocket.Surgery.WebAssembly.Hosting
@using System.Reflection
@using Microsoft.Extensions.DependencyInjection
@using Microsoft.Extensions.DependencyModel
@inject IMediator mediator
@inject ILoggerFactory loggerFactory

<h1>Hello, world!</h1>

Welcome to your new app.

<EditForm Model="request" OnValidSubmit="async () => response = await mediator.Send(request)">
    <Rocket.Surgery.LaunchPad.AspNetCore.Blazor.FluentValidator />
    <ValidationSummary Model="request"/>

    <label>FirstName: <InputText @bind-Value="request.FirstName"/> <ValidationMessage For="() => request.FirstName"/></label>
    <label>LastName: <InputText @bind-Value="request.LastName"/> <ValidationMessage For="() => request.LastName"/> </label>

    <button type="submit">Save</button>
</EditForm>

<div>FullName: @response?.FullName</div>

<div>
    <button @onclick="Save">Go</button>
</div>

@code {
    TestHandler.Request request = new TestHandler.Request();
    TestHandler.Response response;

    void Save() {

        var builder = WebAssemblyHostBuilder.CreateDefault(Array.Empty<string>())
            .ConfigureRocketSurgery(
                AppDomain.CurrentDomain,
                z => z.WithConventionsFrom(_ => typeof(Program).GetMethod("GetConventions").Invoke(null, new object[] { _ }) as IEnumerable<IConventionWithDependencies>)
            ).Build();

    }
}
